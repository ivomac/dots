#!/usr/bin/env python

import subprocess as sp
import time
from os import environ
from pathlib import Path
from sys import argv

import filelock
import psutil
import pyperclip as clip


class Todo:
    def __init__(self):
        clip.set_clipboard("wl-clipboard")

        self.gist = environ["GIST_KEY"]
        self.menu = [
            "fzf",
            "--bind=enter:accept-or-print-query",
            "--exact",
            "--input-label",
            " ï‚® TODO ",
        ]
        self.editor = environ["EDITOR"].split()

        self.filepath = Path("/tmp/todo")
        self.lock = filelock.FileLock("/tmp/todo.lock", timeout=0.1)

        DOCS = environ["DOCS"]
        today = get_boot_date()
        self.diary = Path(DOCS) / "Diary" / (today + ".txt")

        return

    def main(self):
        current_todo = sp.check_output(["gist", "-r", self.gist, "todo"], text=True).rstrip("\n")

        with self.lock:
            with self.filepath.open("w+") as file:
                if len(argv) > 1 and argv[1] in "edit":
                    self.edit(file, current_todo)
                else:
                    self.menuview(file, current_todo)

            cmd = ["nohup", "gist", "-u", self.gist, str(self.filepath)]
            sp.Popen(cmd, stdin=sp.DEVNULL, stdout=sp.DEVNULL, stderr=sp.DEVNULL)

            with self.filepath.open("rt") as file:
                new_todo = file.read()

            self.update_diary(current_todo, new_todo)
        return

    def edit(self, file, todolist):
        file.write(todolist)
        file.flush()
        sp.call([*self.editor, file.name])
        return

    def menuview(self, file, todolist):
        while 1:
            try:
                out = sp.check_output(
                    self.menu,
                    input=todolist,
                    text=True,
                ).rstrip("\n")
            except sp.CalledProcessError:
                break

            lines = todolist.split("\n")
            if out in lines:
                lines.remove(out)
                clip.copy(out)
            else:
                lines.insert(0, out)

            todolist = "\n".join(lines)
        file.write(todolist)
        file.flush()
        return

    def update_diary(self, old, new):
        diff = diff_strings(old, new)
        if diff:
            if self.diary.is_file():
                diary_lines = self.diary.read_text().splitlines()
            else:
                diary_lines = ["", "", "TODO:"]

            self.diary.write_text("\n".join(diary_lines + diff))
        return


def get_boot_date():
    boot_timestamp = psutil.boot_time()
    return time.strftime("%y.%m.%d", time.localtime(boot_timestamp))


def diff_strings(str1, str2):
    lines1 = str1.splitlines()
    lines2 = str2.splitlines()

    result = []

    for line in lines1:
        if line not in lines2:
            result.append(f"- {line}")

    for line in lines2:
        if line not in lines1:
            result.append(f"+ {line}")

    return result


if __name__ == "__main__":
    Todo().main()
